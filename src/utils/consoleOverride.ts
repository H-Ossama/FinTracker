/**
 * Console override for production builds
 * This will silence all console.log statements in production while preserving errors
 */

// Store original console methods
const originalConsole = {
  log: console.log,
  info: console.info,
  warn: console.warn,
  debug: console.debug,
  error: console.error,
};

// List of log patterns to filter out even in development (to reduce spam)
const spamPatterns = [
  'ðŸ“‹ Getting all bills',
  'ðŸ’° Getting all budgets', 
  'ðŸ“‚ Getting bill categories',
  'ðŸ’¾ Bills raw data',
  'ðŸ’¾ Budgets raw data',
  'ðŸ’¾ Categories raw data',
  'ðŸ“Š Parsed bills count',
  'ðŸ“Š Parsed budgets count',
  'ðŸ“Š Parsed categories count',
  'âœ… Bills loaded and statuses updated',
  'âœ… Budgets loaded successfully',
  'âœ… Categories initialized',
  'âœ… Budget categories initialized',
  'âœ… AsyncStorage test',
  'âœ… Budget AsyncStorage test',
];

// Function to check if a log message should be filtered
const shouldFilterLog = (args: any[]): boolean => {
  const message = args.join(' ');
  return spamPatterns.some(pattern => message.includes(pattern));
};

// Override console methods
if (!__DEV__) {
  // Production: silence most logs
  console.log = () => {};
  console.info = () => {};
  console.debug = () => {};
  console.warn = (...args: any[]) => {
    const message = args.join(' ').toLowerCase();
    if (message.includes('error') || message.includes('failed') || message.includes('warning')) {
      originalConsole.warn(...args);
    }
  };
} else {
  // Development: filter spam logs but keep others
  console.log = (...args: any[]) => {
    if (!shouldFilterLog(args)) {
      originalConsole.log(...args);
    }
  };
  
  console.info = (...args: any[]) => {
    if (!shouldFilterLog(args)) {
      originalConsole.info(...args);
    }
  };
}

// Always keep console.error active for debugging
console.error = originalConsole.error;

export { originalConsole };